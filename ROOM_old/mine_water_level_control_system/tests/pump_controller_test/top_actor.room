RoomModel top_actor {
	import room.basic.types.* from "../../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import devices.* from "../../model/devices.room"
	import pump_station.* from "../../model/pump_station.room"

	ActorClass top_actor_t {
		Structure {
			usercode1 '''
				class Constants {
					public static final int TEST_PERIOD_IN_MS = 100;
					public static final int NUMBER_OF_CONTROLLERS = 3;
					public static final int WATER_DETECTORS_CONTROLLER_CONTROLLER = 0;
					public static final int USER = 1;
					public static final int METHANE_CONTROLLER = 2;
				}
			'''		
			
			Attribute expected_state : device_state_t 
			Attribute pump_state : device_state_t 
			Attribute turn_on_message_sent[2] : boolean
			Attribute methane_threshold_breached : boolean
			
			Attribute pump :device_t 
			ActorRef pump_controller : pump_controller_t
			
			conjugated Port pump_controler_iport : pump_controller_iprotocol_t
			Port water_detectors_pump_switch_port : switch_protocol_t
			Port user_switch_port : switch_protocol_t
			Port methane_port : methane_protocol_t 

			SAP timer_port : PTimer 
			
			Binding pump_controler_iport and pump_controller.iport
			Binding water_detectors_pump_switch_port and pump_controller.water_level_detectors_controller_port
			Binding user_switch_port and pump_controller.user_port
			Binding methane_port and pump_controller.methane_port
		}
		Behavior {
		
			StateMachine {
				State testing { }
				
				Transition start : initial -> testing {
					action '''
						this.expected_state = device_state_t.OFF;
						this.pump_state = device_state_t.OFF;
						for ( int i = 0; i < ( Constants.NUMBER_OF_CONTROLLERS - 1 ); i++ ) {
							this.turn_on_message_sent[i] = false;
						}
						this.methane_threshold_breached = false;
						this.pump.state = device_state_t.OFF;
						
						this.pump_controler_iport.initialize ( 
							new pump_controller_idata_t ( 
								this.pump
							)
						);
						
						this.timer_port.startTimeout ( Constants.TEST_PERIOD_IN_MS );
					'''
				}
				
				
				Transition timeout_message_received : testing -> testing {
					triggers {
						< timeout : timer_port > 
					}
					action '''
						String pump_state_string = this.pump.state == device_state_t.ON ? "ON" : "OFF";
						String expected_state_string = this.expected_state == device_state_t.ON ? "ON" : "OFF";
						if ( this.expected_state == this.pump.state ) {
							System.err.println ( "Expected pump state " + expected_state_string + "/" + pump_state_string );
						} else {
							System.err.println ( "Unexpected pump state " + expected_state_string + "/" + pump_state_string );
							System.exit(1);
						}

						int action = (int) ( Math.random ( ) * Constants.NUMBER_OF_CONTROLLERS );
						
						if ( action < ( Constants.NUMBER_OF_CONTROLLERS - 1 ) ) {
							this.turn_on_message_sent[ action ] = !this.turn_on_message_sent[ action ];
						} else {
							this.methane_threshold_breached = !this.methane_threshold_breached;
						}

						switch ( action ) {
							case Constants.WATER_DETECTORS_CONTROLLER_CONTROLLER : {
								if ( this.turn_on_message_sent[ action ] == true ) {
									this.water_detectors_pump_switch_port.turn_on ( );
									System.err.println(0);
								} else {
									this.water_detectors_pump_switch_port.turn_off ( );
									System.err.println(1);
								}

								break;
							}

							case Constants.USER : {
								if ( this.turn_on_message_sent[ action ] == true ) {
									this.user_switch_port.turn_on ( );
									System.err.println(2);
								} else {
									this.user_switch_port.turn_off ( );
									System.err.println(3);
								}

								break;
							}

							case Constants.METHANE_CONTROLLER : {
								if ( this.methane_threshold_breached == true ) {
									this.methane_port.threshold_breached ( );
									System.err.println(4);
								} else {
									this.methane_port.state_normal ( );
									System.err.println(5);
								}

								break;
							}
						}
						
						if ( action < ( Constants.NUMBER_OF_CONTROLLERS - 1 ) ) {
							if ( this.methane_threshold_breached == false ) {
								if ( this.turn_on_message_sent[ action ] == true ) {
									this.expected_state = device_state_t.ON;
								} else {
									this.expected_state = device_state_t.OFF;
								}
							} else {
								if ( this.turn_on_message_sent[ action ] == true ) {
									this.pump_state = device_state_t.ON;
								} else {
									this.pump_state = device_state_t.OFF;
								}
							}
						} else {
							if ( this.methane_threshold_breached == true ) {
								this.pump_state = this.pump.state;
								this.expected_state = device_state_t.OFF;
							} else {
								this.expected_state = this.pump_state;
							}
						}

						this.timer_port.startTimeout ( Constants.TEST_PERIOD_IN_MS );
					'''
				}
			}
		}
	}
}