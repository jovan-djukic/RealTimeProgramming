RoomModel pump_station {
	import room.basic.types.* from "../../org.eclipse.etrice.modellib.java/model/Types.room"
	import devices.* from "devices.room"
	import logger.* from "logger.room"
	import periodic_task.* from "periodic_task.room"
	
	DataClass pump_controller_idata_t {
		Attribute pump : device_t ref
	}

	ProtocolClass pump_controller_iprotocol_t {
		incoming {
			Message initialize ( data : pump_controller_idata_t )
		}
	}

	ActorClass pump_controller_t extends logger_t { 
		Interface {
			Port iport : pump_controller_iprotocol_t
			conjugated Port water_level_detectors_controller_port : switch_protocol_t
			conjugated Port user_port : switch_protocol_t
			conjugated Port methane_port : methane_protocol_t	
		}
		Structure {
			external Port iport
			external Port water_level_detectors_controller_port
			external Port user_port
			external Port methane_port
			
			Attribute pump : device_t ref
			Attribute pump_state : device_state_t
		}
		Behavior {
			StateMachine {
				State waiting_for_imessage { }

				State pump_turned_off {
					entry '''
						this.pump.state = device_state_t.OFF;	
					'''
				}	

				State pump_turned_on {
					entry '''
						this.pump.state = device_state_t.ON;	
					'''
				}	
				
				State methane_threshold_breached { }

				Transition start : initial -> waiting_for_imessage { }
				
				Transition imessage_received : waiting_for_imessage -> pump_turned_off {
					triggers {
						< initialize : iport >
					}
					action '''
						this.pump = data.pump;	
					'''
				}
				
				Transition turn_on_message_received : pump_turned_off -> pump_turned_on {
					triggers {
						< turn_on : water_level_detectors_controller_port > or
						< turn_on : user_port >
					}
					action '''
						super.info ( super.getName ( ), "Turn on message, turning on pump" );
					'''
				}

				Transition turn_off_message_received : pump_turned_on -> pump_turned_off {
					triggers {
						< turn_off : water_level_detectors_controller_port > or
						< turn_off : user_port >
					}
					action '''
						super.info ( super.getName ( ), "Turn off message, turning on pump" );
					'''
				}
				
				Transition methane_threshold_breached_received_while_pump_off : pump_turned_off -> methane_threshold_breached {
					triggers {
						< threshold_breached : methane_port >
					}
					action '''
						this.pump_state = this.pump.state;	
						this.pump.state = device_state_t.OFF;
						super.info ( super.getName ( ), "Methane threshold breached while pump turned off" );
					'''
				}

				Transition methane_threshold_breached_received_while_pump_on : pump_turned_on -> methane_threshold_breached {
					triggers {
						< threshold_breached : methane_port >
					}
					action '''
						this.pump_state = this.pump.state;	
						this.pump.state = device_state_t.OFF;
						super.info ( super.getName ( ), "Methane threshold breached while pump turned on, turning off pump" );
					'''
				}
				
				Transition state_normal_received_pump_was_turned_on : methane_threshold_breached -> pump_turned_on {
					triggers {
						< state_normal : methane_port guard '''
							this.pump_state == device_state_t.ON
						''' >
					}
					action '''
						super.info ( super.getName ( ), "Methane state normal received, turning on pump" );
					'''
				}

				Transition state_normal_received_pump_was_turned_off : methane_threshold_breached -> pump_turned_off {
					triggers {
						< state_normal : methane_port guard '''
							this.pump_state == device_state_t.OFF
						''' >
					}
					action '''
						super.info ( super.getName ( ), "Methane state normal received" );
					'''
				}

				Transition turn_on_message_received_while_methane_threshold_breached : methane_threshold_breached -> methane_threshold_breached {
					triggers {
						< turn_on : water_level_detectors_controller_port > or
						< turn_on : user_port >
					} 
					action '''
						this.pump_state = device_state_t.ON;	
						super.info ( super.getName ( ), "Turn on message received while methane threshold breached, will turn on when methane state is normal" );
					'''
				}

				Transition turn_off_message_received_while_methane_threshold_breached : methane_threshold_breached -> methane_threshold_breached {
					triggers {
						< turn_off : water_level_detectors_controller_port > or
						< turn_off : user_port >
					} 
					action '''
						this.pump_state = device_state_t.OFF;	
						super.info ( super.getName ( ), "Turn off message received while methane threshold breached" );
					'''
				}
			}
		}
	}

	DataClass water_flow_sensor_controller_idata_t extends periodic_task_idata_t {
		Attribute pump : device_t ref
		Attribute water_flow_sensor : water_flow_sensor_t ref
		Attribute number_of_activations : int32
	}

	ActorClass water_flow_sensor_controller_t extends periodic_task_t {
		Interface {
			Port alarm_port : switch_protocol_t
		}
		Structure {
			external Port alarm_port	
			
			Attribute pump : device_t ref
			Attribute water_flow_sensor : water_flow_sensor_t ref
			Attribute number_of_activations : int32
			Attribute pump_state : device_state_t
			Attribute current_activation : int32
		}
		Behavior {
			Operation is_water_flow_sensor_value_expected ( ) : boolean '''
				if ( this.pump.state == device_state_t.ON )	{
					return this.water_flow_sensor.value != 0;
				} else {
					return this.water_flow_sensor.value == 0;
				}
			'''
			StateMachine {
				State checking { 
					entry '''
						super.info ( this.getName ( ), "Sleeping in checking state");
						super.test_port.checking ( );
						this.timer_access_point.startTimeout ( super.period );
					'''
				}
				
				State alarm {
					entry '''
						super.info ( this.getName ( ), "Sleeping in alarm state");
						super.test_port.alarm ( );
						this.timer_access_point.startTimeout ( super.period );
					'''
				}

				RefinedTransition imessage_received {
					action '''
						this.pump = ( ( water_flow_sensor_controller_idata_t ) data ).pump;
						this.water_flow_sensor = ( ( water_flow_sensor_controller_idata_t ) data ).water_flow_sensor;
						this.number_of_activations = ( ( water_flow_sensor_controller_idata_t ) data ).number_of_activations;
						
						this.pump_state = this.pump.state;
						this.current_activation = 0;
					'''
				}

				Transition state_normal_transition : sleeping -> sleeping {
					triggers {
						< timeout : timer_access_point guard '''
							this.pump_state == this.pump.state && this.is_water_flow_sensor_value_expected ( )
						'''>
					}
					action '''
						super.info ( this.getName ( ), "State normal" );
					'''
				}	
				
				Transition pump_state_change_or_water_flow_sensor_error : sleeping -> checking {
					triggers {
						< timeout : timer_access_point guard '''
							this.pump_state != this.pump.state || !this.is_water_flow_sensor_value_expected ( )	
						'''>
					}
					action '''
						this.current_activation = 0;					
						super.info ( this.getName ( ), "Pump state changed or sensor error" );
					'''
				}
				
				Transition check_succeeded : checking -> sleeping {
					triggers {
						< timeout : timer_access_point guard '''
							this.is_water_flow_sensor_value_expected ( ) || this.pump_state == this.pump.state
						'''>
					}
					action '''
						this.current_activation = 0;	
						this.pump_state = this.pump.state;
						super.info ( this.getName ( ), "Pump in previous state or read expected water flow sensor value" );
					'''	
				}

				Transition check_failed_within_limit : checking -> checking {
					triggers {
						< timeout : timer_access_point guard '''
							!this.is_water_flow_sensor_value_expected ( ) && this.current_activation < this.number_of_activations
						'''>
					}
					action '''
						this.current_activation++;	
						super.info ( this.getName ( ), "Read unexpected water flow sensor value, current activation is " + this.current_activation + ", within limit" );
					'''	
				}
				
				Transition check_failed_limit_exceeded : checking -> alarm {
					triggers {
						< timeout : timer_access_point guard '''
							!this.is_water_flow_sensor_value_expected ( ) && this.current_activation == this.number_of_activations
						'''>
					}
					action '''
						this.current_activation = 0;	
						this.alarm_port.turn_on ( );
						super.info ( this.getName ( ), "Read unexpected water flow sensor value, limit breached, turning on alarm" );
					'''	
				}

				Transition check_failed_alarm_turned_on : alarm -> alarm {
					triggers {
						< timeout : timer_access_point guard '''
							this.pump_state != this.pump.state && !this.is_water_flow_sensor_value_expected ( )
						'''>
					}
					action '''
						this.current_activation = 0;	
						super.info ( this.getName ( ), "Read unexpected water flow sensor value, leaving alarm on" );
					'''	
				}

				Transition check_succeeded_alarm_turned_on : alarm -> checking {
					triggers {
						< timeout : timer_access_point guard '''
							this.pump_state == this.pump.state || this.is_water_flow_sensor_value_expected ( )
						'''>
					}
					action '''
						this.current_activation = 0;	
						this.alarm_port.turn_off ( );
						super.info ( this.getName ( ), "Pump state changed or read expected water flow sensor value, turning off alarm" );
					'''	
				}
			}
		}
	}
}