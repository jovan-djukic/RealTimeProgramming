RoomModel pump_station {
	import room.basic.types.* from "../../org.eclipse.etrice.modellib.java/model/Types.room"
	import devices.* 		  from "devices.room"
	import logger.* 		  from "logger.room"
	import periodic_task.* 	  from "periodic_task.room"
	import alarm_station.*	  from "alarm_station.room"
	
	DataClass pump_controller_idata_t {
		Attribute pump : device_t ref
	}

	Enumeration pump_controller_state_t {
		PUMP_TURNED_OFF,
		PUMP_TURNED_ON,
		METHANE_THRESHOLD_BREACHED
	}

	DataClass pump_controller_t { 
		Attribute pump 					  : device_t ref
		Attribute pump_state 			  : device_state_t
		Attribute pump_controller_state   : pump_controller_state_t

		Operation initialize (
			logger     : logger_t,
			actor_name : string,
			data 	   : pump_controller_idata_t
		) : void '''
			logger.info ( 
				actor_name,
				"Initializing pump controller"
			);

			this.pump = data.pump;	
			this.pump.set_state (
				logger,
				actor_name,
				device_state_t.OFF
			);

			this.pump_state 		   = device_state_t.OFF;
			this.pump_controller_state = pump_controller_state_t.PUMP_TURNED_OFF;
		'''

		Operation turn_on ( 
			logger 	   : logger_t,
			actor_name : string
		) : void '''
			synchronized ( this ) { 
				switch ( this.pump_controller_state ) {
					case pump_controller_state_t.PUMP_TURNED_OFF : {
						logger.info ( 
							actor_name,
							"Initial turn on, turning on pump"
						);

						this.pump.set_state (
							logger,
							actor_name,
							device_state_t.ON
						);

						this.pump_controller_state = pump_controller_state_t.PUMP_TURNED_ON;
						
						break;
					}
					
					case pump_controller_state_t.PUMP_TURNED_ON : {
						logger.info ( 
							actor_name,
							"Following turn on, pump already on"
						);

						break;
					}
					
					case pump_controller_state_t.METHANE_THRESHOLD_BREACHED : {
						logger.info ( 
							actor_name,
							"Turn on while methane threshold breached, saving request"
						);

						this.pump_state = device_state_t.ON;

						break;
					}
				}
			}
		'''
		Operation turn_off ( 
			logger     : logger_t, 
			actor_name : string
		) : void '''
			synchronized ( this ) { 
				switch ( this.pump_controller_state ) {
					case pump_controller_state_t.PUMP_TURNED_OFF : {
						logger.info ( 
							actor_name,
							"Following turn off, pump already off"
						);

						break;
					}
					
					case pump_controller_state_t.PUMP_TURNED_ON : {
						logger.info ( 
							actor_name,
							"Initial turn off, turning off pump"
						);

						this.pump.set_state (
							logger,
							actor_name,
							device_state_t.OFF
						);

						this.pump_controller_state = pump_controller_state_t.PUMP_TURNED_OFF;

						break;
					}
					
					case pump_controller_state_t.METHANE_THRESHOLD_BREACHED : {
						logger.info ( 
							actor_name,
							"Turn off while methane threshold breached, saving request"
						);

						this.pump_state = device_state_t.OFF;

						break;
					}
				}
			}
		'''

		Operation methane_threshold_breached ( 
			logger     : logger_t, 
			actor_name : string
		) : void '''
			synchronized ( this ) { 
				if ( this.pump_controller_state != pump_controller_state_t.METHANE_THRESHOLD_BREACHED ) {
					logger.info ( 
						actor_name,
						"Methane threshold breached, saving pump state and turning off pump"
					);

				
					this.pump_state = this.pump.get_state (
						logger,
						actor_name
					);	

					this.pump.set_state (
						logger,
						actor_name,
						device_state_t.OFF
					);

					this.pump_controller_state = pump_controller_state_t.METHANE_THRESHOLD_BREACHED;
				}
			}
		'''

		Operation methane_state_normal ( 
			logger     : logger_t, 
			actor_name : string
		) : void '''
			synchronized ( this ) { 
				if ( this.pump_controller_state == pump_controller_state_t.METHANE_THRESHOLD_BREACHED ) {
					logger.info ( 
						actor_name,
						"Methane state normal, restoring pump state"
					);

					this.pump.set_state (
						logger,
						actor_name,
						this.pump_state
					);

					if ( this.pump_state == device_state_t.ON ) {
						this.pump_controller_state = pump_controller_state_t.PUMP_TURNED_ON;
					} else {
						this.pump_controller_state = pump_controller_state_t.PUMP_TURNED_OFF;
					}
				}
			}
		'''
	}

	DataClass water_flow_sensor_controller_idata_t extends periodic_task_idata_t {
		Attribute pump 					: device_t ref
		Attribute water_flow_sensor 	: sensor_t ref
		Attribute number_of_activations : int32
		Attribute alarm_controller 		: alarm_controller_t ref
	}

	ActorClass water_flow_sensor_controller_t extends periodic_task_t {
		Structure {
			Attribute pump 					: device_t ref
			Attribute water_flow_sensor 	: sensor_t ref
			Attribute number_of_activations : int32
			Attribute pump_state 			: device_state_t
			Attribute current_activation 	: int32
			Attribute alarm_controller 		: alarm_controller_t
		}
		Behavior {
			Operation is_water_flow_sensor_value_expected ( ) : boolean '''
				int current_pump_state = this.pump.get_state (
					super.logger,
					super.getName ( )
				);

				int water_flow_sensor_value = this.water_flow_sensor.get_value (
					super.logger,
					super.getName ( )
				);

				if ( current_pump_state == device_state_t.ON )	{
					return ( water_flow_sensor_value != 0 );
				} else {
					return ( water_flow_sensor_value == 0 );
				}
			'''
			
			Operation has_pump_state_changed ( ) : boolean '''
				int current_pump_state = this.pump.get_state (
					super.logger,
					super.getName ( )
				);
				
				if ( current_pump_state == this.pump_state ) {
					return false;
				} else {
					return true;
				}
			'''
			
			override Operation entry_action ( ) : void '''
				this.water_flow_sensor.start_conversion (
					super.logger,
					super.getName ( )
				);

				super.entry_action ( );
			'''
			
			StateMachine {
				State checking { 
					entry '''
						this.entry_action ( );

						super.logger.info (
							super.getName ( ), 
							"Sleeping in checking state"
						);

						super.test_port.checking ( );

						this.timer_access_point.startTimeout (
							super.period
						);
					'''
					
					exit '''
						this.exit_action ( );
					'''	
				}
				
				State alarm {
					entry '''
						this.entry_action ( );
						
						super.logger.info (
							this.getName ( ),
							"Sleeping in alarm state"
						);

						super.test_port.alarm ( );

						this.timer_access_point.startTimeout (
							super.period
						);
					'''

					exit '''
						this.exit_action ( );
					'''	
				}

				RefinedTransition imessage_received {
					action '''
						this.pump 				   = ( ( water_flow_sensor_controller_idata_t ) data ).pump;
						this.water_flow_sensor 	   = ( ( water_flow_sensor_controller_idata_t ) data ).water_flow_sensor;
						this.number_of_activations = ( ( water_flow_sensor_controller_idata_t ) data ).number_of_activations;
						this.alarm_controller 	   = ( ( water_flow_sensor_controller_idata_t ) data ).alarm_controller;
						
						this.pump_state	= this.pump.get_state ( 
							super.logger,
							super.getName ( )
						);

						this.current_activation = 0;
					'''
				}

				Transition state_normal_transition : sleeping -> sleeping {
					triggers {
						< timeout : timer_access_point guard '''
							( this.has_pump_state_changed ( ) == false ) &&
							( this.is_water_flow_sensor_value_expected ( ) == true )
						'''>
					}
					action '''
						super.logger.info ( 
							super.getName ( ),
							"State normal"
						);
					'''
				}	
				
				Transition pump_state_change_or_water_flow_sensor_error : sleeping -> checking {
					triggers {
						< timeout : timer_access_point guard '''
							( this.has_pump_state_changed ( ) == true ) || 
							( this.is_water_flow_sensor_value_expected ( ) == false )
						'''>
					}
					action '''
						this.current_activation = 0;					

						super.logger.info ( 
							super.getName ( ),
							"Pump state changed or sensor error"
						);
					'''
				}
				
				Transition check_succeeded : checking -> sleeping {
					triggers {
						< timeout : timer_access_point guard '''
							this.is_water_flow_sensor_value_expected ( ) == true
						'''>
					}
					action '''
						this.current_activation = 0;	
						this.pump_state 		= this.pump.state;

						super.logger.info ( 
							super.getName ( ), 
							"Pump in previous state or read expected water flow sensor value"
						);
					'''	
				}

				Transition check_failed_within_limit : checking -> checking {
					triggers {
						< timeout : timer_access_point guard '''
							( this.is_water_flow_sensor_value_expected ( ) == false ) && 
							( this.current_activation < this.number_of_activations )
						'''>
					}
					action '''
						this.current_activation++;	

						super.logger.info ( 
							this.getName ( ), 
							"Read unexpected water flow sensor value, current activation is " + this.current_activation + ", within limit"
						);
					'''	
				}
				
				Transition check_failed_limit_exceeded : checking -> alarm {
					triggers {
						< timeout : timer_access_point guard '''
							( this.is_water_flow_sensor_value_expected ( ) == false ) && 
							( this.current_activation == this.number_of_activations )
						'''>
					}
					action '''
						this.current_activation = 0;	

						super.logger.info ( 
							super.getName ( ), 
							"Read unexpected water flow sensor value, limit breached, turning on alarm"
						);

						this.alarm_controller.turn_on (
							super.logger,
							super.getName ( )
						);
					'''	
				}

				Transition check_failed_alarm_turned_on : alarm -> alarm {
					triggers {
						< timeout : timer_access_point guard '''
							this.is_water_flow_sensor_value_expected ( ) == false
						'''>
					}
					action '''
						this.current_activation = 0;	

						super.logger.info ( 
							super.getName ( ), 
							"Read unexpected water flow sensor value, leaving alarm on"
						);
					'''	
				}

				Transition check_succeeded_alarm_turned_on : alarm -> checking {
					triggers {
						< timeout : timer_access_point guard '''
							this.is_water_flow_sensor_value_expected ( ) == true
						'''>
					}
					action '''
						this.current_activation = 0;	

						super.logger.info ( 
							super.getName ( ), 
							"Pump state changed or read expected water flow sensor value, turning off alarm"
						);

						this.alarm_controller.turn_off (
							super.logger,
							super.getName ( )
						);
					'''	
				}
			}
		}
	}
}