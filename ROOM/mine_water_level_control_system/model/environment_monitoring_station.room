RoomModel environment_monitoring_station {
	import room.basic.types.* from "../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import devices.* from "devices.room"
	import periodic_task.* from "periodic_task.room"
	
	abstract ActorClass sensor_controller_t extends periodic_task_t {
		Behavior {
			Operation query_action ( ) : void '''

			'''
			StateMachine {

				Transition timeout_received : sleeping -> sleeping {
					triggers {
						< timeout : timer_access_point >
					}
					action '''
						super.info ( this.getName ( ), "Query action begin" );
						this.query_action ( );
						super.info ( this.getName ( ), "Query action end" );
					'''
				}
			}
		}
	}

	DataClass water_level_sensors_controller_idata_t extends periodic_task_idata_t {
		Attribute low_water_level_sensor : water_level_sensor_t	ref
		Attribute high_water_level_sensor : water_level_sensor_t ref
	}
	
	ActorClass water_level_sensors_controller_t extends sensor_controller_t {
		Interface {
			Port pump_port : switch_protocol_t
		}
		Structure {
			external Port pump_port
			
			Attribute low_water_level_sensor : water_level_sensor_t ref
			Attribute high_water_level_sensor : water_level_sensor_t ref
		}
		Behavior {
			override Operation query_action ( ) : void '''
				if ( this.low_water_level_sensor.value != 0 )	{
					this.pump_port.turn_off ( );
					super.info ( this.getName ( ), "Water under low threshold, turning off pump" );
				} else if ( this.high_water_level_sensor.value != 0 ) {
					this.pump_port.turn_on ( );
					super.info ( this.getName ( ), "Water over high threshold, turning on pump" );
				}
			'''
			StateMachine {
				RefinedTransition imessage_received {
					action '''
						this.low_water_level_sensor = ( ( water_level_sensors_controller_idata_t ) data ).low_water_level_sensor;
						this.high_water_level_sensor = ( ( water_level_sensors_controller_idata_t ) data ).high_water_level_sensor;
					'''
				}
			}
		}
	}
	
	
	DataClass gas_sensor_controller_idata_t extends periodic_task_idata_t {
		Attribute detect_above_threshold : boolean
		Attribute threshold : int32	
		Attribute gas_sensor : gas_sensor_t ref
		Attribute error_count_threshold : int32
	}

	ActorClass gas_sensor_controller_t extends sensor_controller_t {
		Interface {
			Port alarm_port : switch_protocol_t			
		}	
		Structure {
			external Port alarm_port
			
			Attribute detect_above_threshold : boolean
			Attribute threshold : int32
			Attribute gas_sensor : gas_sensor_t ref
			Attribute error_count_threshold : int32
			Attribute error_count : int32
		}
		Behavior {
			override Operation query_action ( ) : void '''
				if ( this.gas_sensor.error_occurred == true ) {
					this.error_count++;
					if ( this.error_count > this.error_count_threshold ) {
						this.alarm_port.turn_on ( );
						super.info ( super.getName ( ), "Error received, count threshold breached, turning on alarm" );
					} else {
						super.info ( super.getName ( ), "Error received, count normal" );
					}
				} else {
					this.error_count = 0;

					if ( this.detect_above_threshold == true && this.gas_sensor.value > this.threshold ) {
						this.alarm_port.turn_on ( );
						super.info ( super.getName ( ), "Threshold breached, turning on alarm" );
					} else if ( this.detect_above_threshold == false && this.gas_sensor.value < this.threshold ) {
						this.alarm_port.turn_on ( );
						super.info ( super.getName ( ), "Threshold breached, turning on alarm" );
					} else {
						this.alarm_port.turn_off ( );
						super.info ( super.getName ( ), "Threshold stabilizied, turning off alarm" );
					}
				}
			'''
			StateMachine {
				RefinedTransition imessage_received {
					action '''
						this.detect_above_threshold = ( ( gas_sensor_controller_idata_t ) data ).detect_above_threshold;
						this.threshold = ( ( gas_sensor_controller_idata_t ) data ).threshold;
						this.gas_sensor = ( ( gas_sensor_controller_idata_t ) data ).gas_sensor;
						this.error_count_threshold = ( ( gas_sensor_controller_idata_t ) data ).error_count_threshold;
						this.error_count = 0;
					'''
				}
			}
		}
	}
	
	ActorClass methane_sensor_controller_t extends gas_sensor_controller_t {
		Interface {
			Port methane_port : methane_protocol_t
		}
		Structure {
			external Port methane_port 
		}
		Behavior {
			override Operation query_action ( ) : void '''
				super.query_action ( );
				if ( super.gas_sensor.error_occurred == false ) {
					if ( super.gas_sensor.value > super.threshold ) {
						this.methane_port.threshold_breached ( );
						super.info ( super.getName ( ), "Threshold breached, sending message to pump controller" );
					} else {
						this.methane_port.state_normal ( );
						super.info ( super.getName ( ), "State normal, sending message to pump controller" );
					}
				}
			'''
			StateMachine {
				RefinedTransition imessage_received {
					action '''
						super.detect_above_threshold = true;
					'''
				}
			}
		}
	}
}