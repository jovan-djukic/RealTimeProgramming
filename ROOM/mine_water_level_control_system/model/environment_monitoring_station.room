RoomModel environment_monitoring_station {
	import room.basic.types.* 		   from "../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import devices.* 				   from "devices.room"
	import deadline_task.*			   from "deadline_task.room"
	import periodic_task.* 			   from "periodic_task.room"
	import pump_station.* 			   from "pump_station.room"
	import alarm_station.* 			   from "alarm_station.room"
	import logger.*					   from "logger.room"

	DataClass water_level_sensors_controller_idata_t extends deadline_task_idata_t {
		Attribute pump_controller : pump_controller_t ref
	}
	
	ActorClass water_level_sensors_controller_t extends deadline_task_t {
		Interface {
			conjugated Port interrupt_port : water_level_sensors_interrupt_protocol_t
		}
		Structure {
			external Port interrupt_port

			Attribute pump_controller : pump_controller_t ref
		}
		Behavior {

			StateMachine {

				RefinedTransition imessage_received  {
					action '''
						this.pump_controller = ( ( water_level_sensors_controller_idata_t ) data ).pump_controller;
					'''
				}
				
				Transition interrupt_received : sleeping -> sleeping {
					triggers {
						< interrupt : interrupt_port >
					}
					action '''
						super.activated ( );
						
						if ( data.low_water_level_threshold_breached == true )	{
							this.logger.info (
								this.getName ( ),
								"Water under low threshold, turning off pump"
							);

							this.pump_controller.turn_off (
								this.logger,
								super.getName ( )
							);

						} else if ( data.high_water_level_threshold_breached == true ) {
							this.logger.info (
								this.getName ( ), 
								"Water over high threshold, turning on pump"
							);

							this.pump_controller.turn_on (
								this.logger,
								super.getName ( )
							);
						}
						
						super.finished ( );
					'''
				}
			}
		}
	}
	
	
	DataClass gas_sensor_controller_idata_t extends periodic_task_idata_t {
		Attribute detect_above_threshold : boolean
		Attribute threshold  			 : int32	
		Attribute gas_sensor 			 : gas_sensor_t ref
		Attribute error_count_threshold  : int32
		Attribute alarm_controller 		 : alarm_controller_t ref
	}

	ActorClass gas_sensor_controller_t extends periodic_task_t {
		Structure {
			Attribute detect_above_threshold : boolean
			Attribute threshold 			 : int32
			Attribute gas_sensor 			 : gas_sensor_t ref
			Attribute error_count_threshold  : int32
			Attribute error_count 			 : int32
			Attribute alarm_turned_on 		 : boolean
			Attribute alarm_controller 		 : alarm_controller_t ref
		}
		Behavior {
			Operation addittional_query_action ( ) : void '''
			'''

			Operation query_action ( ) : void '''
				boolean read_error_occurred = this.gas_sensor.get_read_error_occurred (
					super.logger,
					super.getName ( )
				);

				if ( read_error_occurred == true ) {
					this.error_count++;
					if ( this.error_count > this.error_count_threshold ) {
						if ( this.alarm_turned_on == false ) {
							super.logger.info (
								super.getName ( ),
								"Error received, count threshold breached, turning on alarm"
							);

							this.alarm_controller.turn_on (
								super.logger,
								super.getName ( )
							);

							this.alarm_turned_on = true;	
						}
					} else {
						super.logger.info (
							super.getName ( ), 
							"Error received, count normal"
						);
					}
				} else {
					this.error_count = 0;

					int gas_sensor_value = this.gas_sensor.get_value (
						super.logger,
						super.getName ( )
					);

					if ( this.detect_above_threshold == true && gas_sensor_value > this.threshold ) {
						if ( this.alarm_turned_on == false ) {
							super.logger.info (
								super.getName ( ),
								"Threshold breached, turning on alarm"
							);

							this.alarm_controller.turn_on (
								super.logger,
								super.getName ( )
							);

							this.alarm_turned_on = true;	
						}
					} else if ( this.detect_above_threshold == false && gas_sensor_value < this.threshold ) {
						if ( this.alarm_turned_on == false ) {
							super.logger.info (
								super.getName ( ), 
								"Threshold breached, turning on alarm"
							);

							this.alarm_controller.turn_on (
								super.logger,
								super.getName ( )
							);

							this.alarm_turned_on = true;	
						}
					} else {
						if ( this.alarm_turned_on == true ) {
							super.logger.info ( 
								super.getName ( ), 
								"Threshold stabilizied, turning off alarm"
							);

							this.alarm_controller.turn_off (
								super.logger,
								super.getName ( )
							);
							this.alarm_turned_on = false;	
						}
					}
				}
				
				this.addittional_query_action ( );
			'''
			
			override Operation entry_action ( ) : void ''' 
				this.gas_sensor.start_conversion (
					super.logger,
					super.getName ( )
				);
				
				super.entry_action ( );
			'''

			StateMachine {
				RefinedTransition imessage_received {
					action '''
						this.detect_above_threshold = ( ( gas_sensor_controller_idata_t ) data ).detect_above_threshold;
						this.threshold  		    = ( ( gas_sensor_controller_idata_t ) data ).threshold;
						this.gas_sensor 		    = ( ( gas_sensor_controller_idata_t ) data ).gas_sensor;
						this.error_count_threshold  = ( ( gas_sensor_controller_idata_t ) data ).error_count_threshold;
						this.alarm_controller 	    = ( ( gas_sensor_controller_idata_t ) data ).alarm_controller;
						this.error_count 	  	    = 0;
						this.alarm_turned_on  	    = false;
					'''
				}

				Transition timeout_received : sleeping -> sleeping {
					triggers {
						< timeout : timer_access_point >
					}
					action '''
						super.logger.info (
							this.getName ( ),
							"Query action begin"
						);

						this.query_action ( );

						super.logger.info (
							this.getName ( ),
							"Query action end"
						);
					'''
				}
			}
		}
	}
	
	DataClass methane_sensor_controller_idata_t extends gas_sensor_controller_idata_t {
		Attribute pump_controller : pump_controller_t ref
	}
	
	ActorClass methane_sensor_controller_t extends gas_sensor_controller_t {
		Structure {
			Attribute pump_controller 	 : pump_controller_t ref
			Attribute threshold_breached : boolean
		}
		Behavior {
			override Operation addittional_query_action ( ) : void '''
				boolean read_error_occurred = super.gas_sensor.get_read_error_occurred (
					super.logger,
					super.getName ( )
				);

				if ( read_error_occurred == false ) {
					int value = super.gas_sensor.get_value (
						super.logger,
						super.getName ( )
					);

					if ( value > super.threshold ) {
						if ( this.threshold_breached == false ) {
							super.logger.info (
								super.getName ( ),
								"Threshold breached, sending message to pump controller"
							);

							this.pump_controller.methane_threshold_breached (
								super.logger,
								super.getName ( )
							);

							this.threshold_breached = true;
						}
					} else {
						if ( this.threshold_breached == true ) {
							super.logger.info (
								super.getName ( ), 
								"State normal, sending message to pump controller"
							);

							this.pump_controller.methane_state_normal (
								super.logger,
								super.getName ( )
							);

							this.threshold_breached = false;
						}
					}
				}
			'''
			StateMachine {
				RefinedTransition imessage_received {
					action '''
						super.detect_above_threshold = true;

						this.pump_controller    = ( ( methane_sensor_controller_idata_t ) data ).pump_controller;
						this.threshold_breached = false;
					'''
				}
			}
		}
	}
}