RoomModel environment_monitoring_station {
	import room.basic.types.* from "../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import devices.* from "devices.room"
	import logger.logger_t from "logger.room"
	
	DataClass environment_station_actor_base_idata_t {
		Attribute period : int32 = '0'
	}
	
	ProtocolClass environmonet_statition_actor_base_iprotocol_t {
		incoming {
			Message initialize ( data : environment_station_actor_base_idata_t )
		}
	}
	
	abstract ActorClass environment_station_actor_base_t extends logger_t {
		Interface { 
			Port iport : environmonet_statition_actor_base_iprotocol_t
		}	
		Structure {
			external Port iport

			SAP timer_access_point : PTimer

			Attribute period : int32 = '0'

		}
		Behavior {
			Operation query_action ( ) : void '''

			'''
			StateMachine {
				State waiting_for_imessage { }
				State querying { 
					entry '''
						this.query_action ( );
						timer_access_point.startTimeout( this.period );
					'''
				}
				
				Transition start : initial -> waiting_for_imessage { }
				
				Transition imessage_received : waiting_for_imessage -> querying {
					triggers {
						< initialize : iport >
					}	
					action '''
						this.period = data.period;
					'''
				}
				
				Transition timeout_received : querying -> querying {
					triggers {
						< timeout : timer_access_point >
					}
				}
			}
		}
	}

	DataClass water_level_detector_controller_base_idata_t extends environment_station_actor_base_idata_t {
		Attribute water_level_detector : water_level_detector_t	ref
	}
	
	abstract ActorClass water_level_detector_controller_base_t extends environment_station_actor_base_t {
		Interface {
			Port pump_switch_port : switch_protocol_t
		}
		Structure {
			external Port pump_switch_port
			
			Attribute water_level_detector : water_level_detector_t ref
		}
		Behavior {
			StateMachine {
				RefinedTransition imessage_received {
					action '''
						this.water_level_detector = ( ( water_level_detector_controller_base_idata_t ) data ).water_level_detector;
					'''
				}
			}
		}
	}
	
	ActorClass low_water_level_detector_controller_t extends water_level_detector_controller_base_t {
		Behavior {
			override Operation query_action ( ) :void '''
				if ( super.water_level_detector.value == 1 ) {
					super.pump_switch_port.turn_off ( );
					super.info ( super.getName(), "Pump switched off" );
				}
			'''
		}	
	}

	ActorClass high_water_level_detector_controller_t extends water_level_detector_controller_base_t {
		Behavior {
			override Operation query_action ( ) :void '''
				if ( super.water_level_detector.value == 1 ) {
					super.pump_switch_port.turn_on ( );
					super.info ( super.getName(), "Pump switched on" );
				}
			'''
		}	
	}
	
	DataClass gas_sensor_controller_idata_t extends environment_station_actor_base_idata_t {
		Attribute detect_above_threshold : boolean
		Attribute threshold : int32	
		Attribute gas_sensor : gas_sensor_t ref
		Attribute error_count_threshold : int32
	}

	ActorClass gas_sensor_controller_t extends environment_station_actor_base_t {
		Interface {
			Port alarm_port : switch_protocol_t			
		}	
		Structure {
			external Port alarm_port
			
			Attribute detect_above_threshold : boolean
			Attribute threshold : int32
			Attribute gas_sensor : gas_sensor_t ref
			Attribute error_count_threshold : int32
			Attribute error_count : int32
		}
		Behavior {
			override Operation query_action ( ) : void '''
				if ( this.gas_sensor.error_occurred == true ) {
					this.error_count++;
					if ( this.error_count > this.error_count_threshold ) {
						this.alarm_port.turn_on ( );
						super.info ( super.getName ( ), "Error count threshold breached, turning on alarm" );
					}
				} else {
					this.error_count = 0;

					if ( this.detect_above_threshold == true && this.gas_sensor.value > this.threshold ) {
						this.alarm_port.turn_on ( );
						super.info ( super.getName ( ), "Threshold breached, turning on alarm" );
					} else if ( this.detect_above_threshold == false && this.gas_sensor.value < this.threshold ) {
						this.alarm_port.turn_on ( );
						super.info ( super.getName ( ), "Threshold breached, turning on alarm" );
					} else {
						this.alarm_port.turn_off ( );
						super.info ( super.getName ( ), "Threshold stabilizied, turning off alarm" );
					}
				}
			'''
			StateMachine {
				RefinedTransition imessage_received {
					action '''
						this.detect_above_threshold = ( ( gas_sensor_controller_idata_t ) data ).detect_above_threshold;
						this.threshold = ( ( gas_sensor_controller_idata_t ) data ).threshold;
						this.gas_sensor = ( ( gas_sensor_controller_idata_t ) data ).gas_sensor;
						this.error_count_threshold = ( ( gas_sensor_controller_idata_t ) data ).error_count_threshold;
						this.error_count = 0;
					'''
				}
			}
		}
	}
}