RoomModel top_actor {
	import room.basic.types.*          from "../../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import devices.* 				   from "../../model/devices.room"
	import pump_station.* 			   from "../../model/pump_station.room"
	import logger.*					   from "../../model/logger.room"

	ActorClass top_actor_t {
		Structure {
			usercode1 '''
				class Constants {
					public static final int    TEST_PERIOD_IN_MS 					= 50;
					public static final int    NUMBER_OF_PUMP_CONTROLLER_OPERATIONS = 4;
					public static final int    TURN_ON_OPERATION  					= 0;
					public static final int    TURN_OFF_OPERATION 					= 1;
					public static final int    METHANE_THRESHOLD_BREACHED_OPERATION = 2;
					public static final int    METHANE_STATE_NORMAL_OPERATION 		= 3;
					public static final String PUMP_NAME 		 					= "PUMP";
				}
			'''		
			
			Attribute expected_state 			 : device_state_t 
			Attribute pump_state 				 : device_state_t 
			Attribute turn_on_message_sent 		 : boolean
			Attribute methane_threshold_breached : boolean
			
			Attribute logger		  : logger_t
			Attribute pump 			  : device_t 
			Attribute pump_controller : pump_controller_t
			
			SAP timer_port : PTimer 
		}
		Behavior {
		
			StateMachine {
				State testing { }
				
				Transition start : initial -> testing {
					action '''
						this.expected_state 			= device_state_t.OFF;
						this.pump_state 				= device_state_t.OFF;
						this.methane_threshold_breached = false;

						this.pump.initialize ( 
							this.logger,
							super.getName ( ),
							Constants.PUMP_NAME,
							device_state_t.OFF
						);
						
						this.pump_controller.initialize ( 
							this.logger,
							super.getName ( ),
							new pump_controller_idata_t ( 
								this.pump
							)
						);
						
						this.timer_port.startTimeout (
							Constants.TEST_PERIOD_IN_MS
						);
					'''
				}
				
				
				Transition timeout_message_received : testing -> testing {
					triggers {
						< timeout : timer_port > 
					}
					action '''
						int choice = ( int ) ( Math.random ( ) * Constants.NUMBER_OF_PUMP_CONTROLLER_OPERATIONS );
						
						switch ( choice ) {
							case Constants.TURN_ON_OPERATION : {
								this.pump_controller.turn_on (
									this.logger,
									super.getName ( )	
								);
								
								if ( this.methane_threshold_breached == true ) {
									this.pump_state 	= device_state_t.ON;
									this.expected_state = device_state_t.OFF;
								} else {
									this.expected_state = device_state_t.ON;
								}

								break;
							}

							case Constants.TURN_OFF_OPERATION : {
								this.pump_controller.turn_off (
									this.logger,
									super.getName ( )	
								);
								
								if ( this.methane_threshold_breached == true ) {
									this.pump_state 	= device_state_t.OFF;
									this.expected_state = device_state_t.OFF;
								} else {
									this.expected_state = device_state_t.OFF;
								}

								break;
							}

							case Constants.METHANE_THRESHOLD_BREACHED_OPERATION : {
								this.pump_controller.methane_threshold_breached (
									this.logger,
									super.getName ( )	
								);
								
								if ( this.methane_threshold_breached != true ) {
									this.pump_state 				= this.expected_state;
									this.expected_state 			= device_state_t.OFF;
									this.methane_threshold_breached = true;
								}
								break;
							}

							case Constants.METHANE_STATE_NORMAL_OPERATION : {
								this.pump_controller.methane_state_normal (
									this.logger,
									super.getName ( )
								);

								if ( this.methane_threshold_breached == true ) {
									this.expected_state 		    = this.pump_state;
									this.methane_threshold_breached = false;
								}

								break;
							}
						}
						
						int current_pump_state = this.pump.get_state (
							this.logger,
							super.getName ( )
						);

						if ( this.expected_state == current_pump_state ) {
							System.out.println ( 
								"Expected state"
							);
							this.logger.info (
								super.getName ( ),
								"Expected state"
							);
						} else {
							System.err.println ( 
								"Unexpected state"
							);
							this.logger.info (
								super.getName ( ),
								"Unexpected state"
							);
						}

						this.timer_port.startTimeout (
							Constants.TEST_PERIOD_IN_MS
						);
					'''
				}
			}
		}
	}
}