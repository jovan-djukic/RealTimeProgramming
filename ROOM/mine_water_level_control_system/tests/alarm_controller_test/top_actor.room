RoomModel top_actor {
	import room.basic.types.* 		   from "../../../org.eclipse.etrice.modellib.java/model/Types.room"
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import devices.* 				   from "../../model/devices.room"
	import alarm_station.* 			   from "../../model/alarm_station.room"
	import logger.* 				   from "../../model/logger.room"

	ActorClass top_actor_t {
		Structure {
			usercode1 '''
				class Constants {
					public static final int    TEST_PERIOD_IN_MS 		  = 50;
					public static final int    NUMBER_OF_ALARM_ACTIVATORS = 4;
					public static final String ALARM_NAME 				  = "ALARM";
				}
			'''		
			
			Attribute logger		   : logger_t		
			Attribute alarm            : device_t 
			Attribute alarm_controller : alarm_controller_t
			Attribute alarm_level      : int32
			
			SAP timer_port : PTimer 
		}
		Behavior {
		
			StateMachine {
				State testing { }
				
				Transition start : initial -> testing {
					action '''
						this.alarm_level = 0;
						
						this.alarm.initialize (
							this.logger,
							super.getName ( ),
							Constants.ALARM_NAME,
							device_state_t.OFF
						);

						this.alarm_controller.initialize ( 
							this.logger,
							super.getName ( ),
							new alarm_controller_idata_t ( 
								this.alarm,
								Constants.NUMBER_OF_ALARM_ACTIVATORS
							)
						);
						
						this.timer_port.startTimeout (
							Constants.TEST_PERIOD_IN_MS
						);
					'''
				}
				
				
				Transition timeout_message_received : testing -> testing {
					triggers {
						< timeout : timer_port > 
					}
					action '''
						if ( Math.random ( ) < 0.5 ) {
							this.alarm_controller.turn_on (
								this.logger,
								super.getName ( )
							);	
							
							if ( this.alarm_level < Constants.NUMBER_OF_ALARM_ACTIVATORS ) {
								this.alarm_level++;
							}
						} else {
							this.alarm_controller.turn_off (
								this.logger,
								super.getName ( )
							);	
							
							if ( this.alarm_level > 0 ) {
								this.alarm_level--;
							}
						}

						int alarm_state = this.alarm.get_state (
							this.logger,
							super.getName ( )
						);

						if ( alarm_state == device_state_t.ON ) {
							if ( this.alarm_level > 0 ) {
								System.out.println ( "Expected state" );

								this.logger.info (
									super.getName ( ),
									"Expected state"
								);
							} else {
								System.err.println ( "Unexpected state" );

								this.logger.info (
									super.getName ( ),
									"Unexpected state"
								);
							}
						} else {
							if ( this.alarm_level == 0 ) {
								System.out.println ( "Expected state" );

								this.logger.info (
									super.getName ( ),
									"Expected state"
								);
							} else {
								System.err.println ( "Unexpected state" );

								this.logger.info (
									super.getName ( ),
									"Unexpected state"
								);
							}
						}

						this.timer_port.startTimeout (
							Constants.TEST_PERIOD_IN_MS
						);
					'''
				}
			}
		}
	}
}