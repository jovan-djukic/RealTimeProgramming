RoomModel top_actor {
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import room.basic.types.* 		   from "../../../org.eclipse.etrice.modellib.java/model/Types.room"
	import base_actor.* 			   from "../base_actor.room"

	ActorClass top_actor_t extends base_actor_t {
		Structure {
			Attribute number_of_activations : int32
		}
		Behavior {
			StateMachine {
				State step1 {
					entry '''
						System.out.println (
							"STEP 1"
						);
					'''	
				}
				State step2 { 
					entry '''
						System.out.println (
							"STEP 2"
						);
					'''	
				}
				State step3 { 
					entry '''
						System.out.println (
							"STEP 3"
						);
					'''	
				}
				State step4 { 
					entry '''
						System.out.println (
							"STEP 4"
						);
					'''	
				}
				State step5 { 
					entry '''
						System.out.println (
							"STEP 5"
						);
					'''	
				}
				State step6 { 
					entry '''
						System.out.println (
							"STEP 6"
						);
					'''	
				}
				State step7 { 
					entry '''
						System.out.println (
							"STEP 7"
						);
					'''	
				}
				State step8 { 
					entry '''
						System.out.println (
							"STEP 8"
						);
					'''	
				}
				State step9 { 
					entry '''
						System.out.println (
							"STEP 9"
						);
					'''	
				}
				State step10 { 
					entry '''
						System.out.println (
							"STEP 10"
						);
					'''	
				}
				State step11 { 
					entry '''
						System.out.println (
							"STEP 11"
						);
					'''	
				}
				State step12 { 
					entry '''
						System.out.println (
							"STEP 12"
						);
					'''	
				}
				State step13 { 
					entry '''
						System.out.println (
							"STEP 13"
						);
					'''	
				}
				State step14 { 
					entry '''
						System.out.println (
							"STEP 14"
						);
					'''	
				}
				State step15 { 
					entry '''
						System.out.println (
							"STEP 15"
						);
					'''	
				}
				State step16 { 
					entry '''
						System.out.println (
							"STEP 16"
						);
					'''	
				}

				RefinedTransition start { 
					action '''
						System.out.println ( 
							"Turning on pump using user port"
						);

						super.mine_water_level_control_system_user_port.turn_on ( );
						
						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}

				Transition stall0 : step0 -> step0 {
					triggers {
						< timeout : timer_access_point guard '''
							super.is_pump_turned_on ( ) == false
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition0 : step0 -> step1 {
					triggers {
						< timeout : timer_access_point guard '''
							super.is_pump_turned_on ( ) == true 
						'''>
					}
					action '''
						System.out.println ( 
							"Pump activated"
						);
					'''
				}

					
				Transition transition1 : step1 -> step2 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( 
							"Water flow sensor controller detected state change"
						);
						
						this.number_of_activations = 0;
					'''
				}

				Transition stall2 : step2 -> step2 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						''' >
					}
					action '''
						this.number_of_activations++;

						System.out.println ( 
							"Water flow sensor activated, " + this.number_of_activations + " / " + Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS
						);
					'''
				}	
					
				Transition transition2 : step2 -> step3 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						''' >
					}
					action '''
						System.out.println ( 
							"One more try left before activation of alarm"
						);

						System.out.println ( 
							"Setting water flow sensor to avoid alarm activation"
						);
						
						super.water_flow_sensor.set_value (
							super.logger,
							super.getName ( ),
							1
						);
					'''
				}

				Transition transition3 : step3 -> step4 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( 
							"Pump state confirmed"
						);
						
						super.pause ( );
						
						System.out.println ( 
							"Setting methane levels over threshold"
						);
						
						int ch4_sensor_value = super.get_above_threshold_value (
							true,
							Constants.CH4_SENSOR_CONTROLLER.THRESHOLD
						);

						super.ch4_sensor.set_value (
							this.logger,
							super.getName ( ),
							ch4_sensor_value
						);

						super.ch4_sensor.set_read_error_occurred (
							this.logger,
							super.getName ( ),
							false
						);

						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}

				Transition stall4 : step4 -> step4 {
					triggers {
						< timeout : timer_access_point guard '''
							( super.is_alarm_turned_on ( ) == false ) ||
							( super.is_pump_turned_on ( ) == true )
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition4 : step4 -> step5 {
					triggers {
						< timeout : timer_access_point guard '''
							( super.is_alarm_turned_on ( ) == true ) && 
							( super.is_pump_turned_on ( ) == false )
						'''>
					}
					action '''
						System.out.println ( 
							"Alarm activated and pump deactivated"
						);
					'''
				}

				Transition transition5 : step5 -> step6 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( 
							"Water flow sensor controller detected state change"
						);
						
						this.number_of_activations = 0;
					'''
				}

				Transition stall6 : step6 -> step6 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )
						''' >
					}
					action '''
						this.number_of_activations++;

						System.out.println ( 
							"Water flow sensor activated, " + this.number_of_activations + " / " + Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS
						);
					'''
				}	
					
				Transition transition6 : step6 -> step7 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )
						''' >
					}
					action '''
						System.out.println ( 
							"Unsetting water flow sensor"
						);
						
						super.water_flow_sensor.value = 0;
					'''
				}
				

				Transition transition7 : step7 -> step8 {
					triggers {
						< activated : mine_water_level_control_system_test_port>
					}
					action '''
						System.out.println ( 
							"Pump state confirmed"
						);
						
						super.pause ( );

						System.out.println ( 
							"Setting methane below over threshold"
						);

						int ch4_sensor_value = super.get_below_threshold_value (
							true,
							Constants.CH4_SENSOR_CONTROLLER.THRESHOLD
						);

						super.ch4_sensor.set_value (
							this.logger,
							super.getName ( ),
							ch4_sensor_value
						);

						super.ch4_sensor.set_read_error_occurred (
							this.logger,
							super.getName ( ),
							false
						);

						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}

				Transition stall8 : step8 -> step8 {
					triggers {
						< timeout : timer_access_point guard '''
							( super.is_alarm_turned_on ( ) == true ) ||
							( super.is_pump_turned_on ( ) == false )
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition8 : step8 -> step9 {
					triggers {
						< timeout : timer_access_point guard '''
							( super.is_alarm_turned_on ( ) == false ) &&
							( super.is_pump_turned_on ( ) == true )
						'''>
					}
					action '''
						System.out.println ( 
							"Alarm deactivated and pump activated"
						);
					'''
				}

				Transition transition9 : step9 -> step10 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( 
							"Water flow sensor controller detected state change"
						);
						
						this.number_of_activations = 0;
					'''
				}

				Transition stall10 : step10 -> step10 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )
						''' >
					}
					action '''
						this.number_of_activations++;

						System.out.println ( 
							"Water flow sensor activated, " + this.number_of_activations + " / " + Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS
						);
					'''
				}	
					
				Transition transition10 : step10 -> step11 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )
						''' >
					}
					action '''
						System.out.println ( 
							"Setting water flow sensor"
						);
						
						super.water_flow_sensor.set_value (
							super.logger,
							super.getName ( ),
							1
						);
					'''
				}

				Transition transition11 : step11 -> step12 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( 
							"Pump state confirmed"
						);
						
						super.pause ( );

						System.out.println ( "Setting low water level sensor" );

						super.mine_water_level_control_system_update_port.update (
							Constants.WATER_LEVEL_SENSORS.LOW_WATER_LEVEL_THRESHOLD - 1	
						);

						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}

				Transition stall12 : step12 -> step12 {
					triggers {
						< timeout : timer_access_point guard '''
							super.is_alarm_turned_on ( ) == true
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							Constants.SCENARIO.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition12 : step12 -> step13 {
					triggers {
						< timeout : timer_access_point guard '''
							super.is_alarm_turned_on ( ) == false 
						'''>
					}
					action '''
						System.out.println ( 
							"Pump deactivated"
						);
					'''
				}

				Transition transition13 : step13 -> step14 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( 
							"Water flow sensor controller detected state change"
						);
						
						this.number_of_activations = 0;
					'''
				}

				Transition stall14 : step14 -> step14 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )
						''' >
					}
					action '''
						this.number_of_activations++;

						System.out.println ( 
							"Water flow sensor activated, " + this.number_of_activations + " / " + Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS
						);
					'''
				}	
					
				Transition transition14 : step14 -> step15 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( Constants.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )
						''' >
					}
					action '''
						System.out.println ( 
							"Unsetting water flow sensor"
						);
						
						super.water_flow_sensor.set_value (
							super.logger,
							super.getName ( ),
							0
						);
					'''
				}

				Transition transition15 : step15 -> step16 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println (
							"Pump state confirmed"
						);

						super.stop_scenario ( );
					'''
				}
			}
		}
	}
}
