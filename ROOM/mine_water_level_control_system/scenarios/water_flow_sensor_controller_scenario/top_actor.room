RoomModel top_actor {
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import room.basic.types.* from "../../../org.eclipse.etrice.modellib.java/model/Types.room"
	import base_actor.* from "../base_actor.room"

	ActorClass top_actor_t extends base_actor_t {
		Structure {
			Attribute number_of_activations : int32
		}
		Behavior {
			StateMachine {
				State step1 { }
				State step2 { }
				State step3 { }
				State step4 { }
				State step5 { }
				State step6 { }
				State step7 { }
				State step8 { }
				State step9 { }
				State step10 { }
				State step11 { }
				State step12 { }
				State step13 { }
				State step14 { }
				State step15 { }
				State step16 { }
				State step17 { }
				State step18 { }
				State step19 { }

				RefinedTransition start { 
					action '''
						System.out.println ( "Setting high water level sensor" );

						super.high_water_level_sensor.value = 1;	
						
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}

				Transition stall0 : step0 -> step0 {
					triggers {
						< timeout : timer_access_point guard '''
							super.pump.state != device_state_t.ON
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition0 : step0 -> step1 {
					triggers {
						< timeout : timer_access_point guard '''
							super.pump.state == device_state_t.ON
						'''>
					}
					action '''
						System.out.println ( "Pump activated" );
						
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}

					
				Transition transition1 : step1 -> step2 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor controller detected state change" );
						
						this.number_of_activations = 0;
					'''
				}

				Transition stall2 : step2 -> step2 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						''' >
					}
					action '''
						this.number_of_activations++;
						System.out.println ( "Water flow sensor activated, " + this.number_of_activations + " / " + CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS );
					'''
				}	
					
				Transition transition2 : step2 -> step3 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						''' >
					}
					action '''
						System.out.println ( "Water flow sensor activated" );
						System.out.println ( "One more try left before activation of alarm" );
						System.out.println ( "Setting water flow sensor to avoid alarm activation" );
						
						super.water_flow_sensor.value = 1;
					'''
				}

				Transition transition3 : step3 -> step4 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor in sleeping state" );
						System.out.println ( "Setting low water level sensor" );
						
						super.low_water_level_sensor.value = 1;
						super.high_water_level_sensor.value = 0;
						this.number_of_activations = 0;

						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}

				Transition stall4 : step4 -> step4 {
					triggers {
						< timeout : timer_access_point guard '''
							super.pump.state != device_state_t.OFF	
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition4 : step4 -> step5 {
					triggers {
						< timeout : timer_access_point guard '''
							super.pump.state == device_state_t.OFF	
						'''>
					}
					action '''
						System.out.println ( "Pump turned off" );
						this.number_of_activations = 0;
					'''
				}

				Transition transition5 : step5 -> step6 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor controller detected state change" );
						
						this.number_of_activations = 0;
					'''
				}

				Transition stall6 : step6 -> step6 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS	
						''' >
					}
					action '''
						this.number_of_activations++;
						System.out.println ( "Water flow sensor activated, " + this.number_of_activations + " / " + CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS );
					'''
				}	
					
				Transition transition6 : step6 -> step7 {
					triggers {
						< alarm : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Last check" );
						System.out.println ( "Turn on alarm message sent" );

						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}
				
				Transition stall7 : step7 -> step7 {
					triggers {
						< timeout : timer_access_point guard '''
							super.alarm.state != device_state_t.ON	
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}

				Transition transition7 : step7 -> step8 {
					triggers {
						< timeout : timer_access_point guard '''
							super.alarm.state == device_state_t.ON	
						'''>
					}
					action '''
						System.out.println ( "Alarm on state confirmed" );
						System.out.println ( "Unsetting water flow sensor" );
						
						super.water_flow_sensor.value = 0;
					'''
				}

				Transition transition8 : step8 -> step9 {
					triggers {
						< checking : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor controller is checking" );
					'''
				}


				Transition transition9 : step9 -> step10 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor controller is sleeping" );
						System.out.println ( "Setting water flow sensor" );

						super.water_flow_sensor.value = 1;
					'''
				}
				
				Transition transition10 : step10 -> step11 {
					triggers {
						< checking : mine_water_level_control_system_test_port>	
					}
					action '''
						System.out.println ( "Water flow sensor controller initial check" );

						this.number_of_activations = 0;
					'''
				}
				
				Transition stall11 : step11 -> step11 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						'''>
					}
					action '''
						this.number_of_activations++;
						System.out.println ( "Water flow sensor activated, " + this.number_of_activations + " / " + CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS );
					'''
				}
					
				Transition transition11 : step11 -> step12 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						'''>
					}
					action '''
						System.out.println ( "Last check before alarm activation" );
						System.out.println ( "Unsetting water flow sensor" );

						this.water_flow_sensor.value = 0;
					'''
				}
				
				Transition transition12 : step12 -> step13 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor controller is in sleeping state" );
						System.out.println ( "Turning on pump using user port" );

						super.mine_water_level_control_system_user_port.turn_on ( );

						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}

				Transition stall13 : step13 -> step13 {
					triggers {
						< timeout : timer_access_point guard '''
							super.pump.state != device_state_t.ON	
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARION.CHECK_PERIOD
						);
					'''
				}	
				
				Transition transition13 : step13 -> step14 {
					triggers {
						< timeout : timer_access_point guard '''
							super.pump.state == device_state_t.ON	
						'''>
					}
					action '''
						System.out.println ( "Pump turned on" );
					'''
				}
				
				Transition transition14 : step14 -> step15 {
					triggers {
						< checking : mine_water_level_control_system_test_port>	
					}
					action '''
						System.out.println ( "Water flow sensor controller initial check" );

						this.number_of_activations = 0;
					'''
				}
				
				Transition stall15 : step15 -> step15 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations != ( CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						'''>
					}
					action '''
						this.number_of_activations++;
						System.out.println ( "Water flow sensor activated, " + this.number_of_activations + " / " + CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS );
					'''
				}
					
				Transition transition15 : step15 -> step16 {
					triggers {
						< checking : mine_water_level_control_system_test_port guard '''
							this.number_of_activations == ( CONSTANTS.WATER_FLOW_SENSOR_CONTROLLER.NUMBER_OF_ACTIVATIONS - 1 )	
						'''>
					}
					action '''
						System.out.println ( "Last check before alarm activation" );
						System.out.println ( "Turning pump off using user port" );

						super.mine_water_level_control_system_user_port.turn_off ( );
					'''
				}
				
				Transition transition16 : step16 -> step17 {
					triggers {
						< activated : mine_water_level_control_system_test_port >
					}
					action '''
						System.out.println ( "Water flow sensor controller is in sleeping state" );

						super.stop_scenario ( );
					'''
				}
			}
		}
	}
}
