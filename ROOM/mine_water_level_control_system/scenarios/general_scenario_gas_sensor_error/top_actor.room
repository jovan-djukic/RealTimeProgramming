RoomModel top_actor {
	import room.basic.service.timing.* from "../../../org.eclipse.etrice.modellib.java/model/TimingService.room"
	import base_actor.* from "../base_actor.room"

	ActorClass top_actor_t extends base_actor_t {
		Behavior {
			StateMachine {
				State step1 { }
				State step2 { }

				RefinedTransition start { 
					action '''
						System.out.println ( "Setting o sensor to error" );
						super.o_sensor.value = 0;
						super.o_sensor.error_occurred = true;
						
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARIO.CHECK_PERIOD
						);
					'''
				}

				Transition stall0 : step0 -> step0 {
					triggers {
						< timeout : timer_access_point guard '''
							super.alarm.state != device_state_t.ON
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARIO.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition0 : step0 -> step1 {
					triggers {
						< timeout : timer_access_point guard '''
							super.alarm.state == device_state_t.ON
						'''>
					}
					action '''
						System.out.println ( "Alarm activated" );

						System.out.println ( "Pausing for " + CONSTANTS.SCENARIO.SLEEP_TIME_IN_S + " seconds" );
						
						try {
							java.lang.Thread.sleep ( CONSTANTS.SCENARIO.SLEEP_TIME_IN_S * 1000 );
						} catch ( InterruptedException e ) { }

						System.out.println ( "Setting o sensor below threshold" );
						super.o_sensor.value = super.get_below_threshold_value (
							CONSTANTS.O_SENSOR_CONTROLLER.DETECT_ABOVE_THRESHOLD,
							CONSTANTS.O_SENSOR_CONTROLLER.THRESHOLD
						);
						super.o_sensor.error_occurred = false;
						
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARIO.CHECK_PERIOD
						);
					'''
				}

				Transition stall1 : step1 -> step1 {
					triggers {
						< timeout : timer_access_point guard '''
							super.alarm.state != device_state_t.OFF
						'''>
					}
					action '''
						super.timer_access_point.startTimeout (
							CONSTANTS.SCENARIO.CHECK_PERIOD
						);
					'''
				}	
					
				Transition transition1 : step1 -> step2 {
					triggers {
						< timeout : timer_access_point guard '''
							super.alarm.state == device_state_t.OFF
						'''>
					}
					action '''
						System.out.println ( "Alarm deactivated" );
						
						super.stop_scenario ( );
					'''
				}
			}
		}
	}
}
